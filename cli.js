#! /usr/bin/env node

"use strict";

var fs = require("fs"),
    pegjs = require("pegjs"),
    nomnom = require("nomnom"),
    beautify = require("js-beautify"),
    json = require("./package.json"),
    compiler = require("./src/compiler");

var opts = nomnom
.option("files", {
    position: 0,
    help: "Files to compile. The compiled versions will be saved with the same filename, except with a .js extension.",
    list: true
})
.option("stdout", {
    abbr: "s",
    flag: true,
    help: "instead of saving compiled source, output to stdout "
})
.option("debug", {
    abbr: "d",
    flag: true,
    help: "debug mode"
})
.option("version", {
    flag: true,
    help: "display the version number",
    callback: function () {
        return "version " + json.version;
    }
})
.parse();

if (!opts.files) {
    console.log(nomnom.getUsage());
    process.exit(0);
}

opts.files.forEach(function (fileName, fileIndex) {
    fs.readFile(fileName, "utf-8", function (error, content) {
        var parser;
        if (opts.debug) {
            var grammar = fs.readFileSync('./src/parser.pegjs', 'utf8');
            var options = { trace: true };
            parser = pegjs.buildParser(grammar, { allowedStartRules: ['Start', 'StartComments'] });
        } else {
            parser = module.require('./src/parser');
        }
        var js_source = compiler.compile(parser, content),
        generated = "// Generated by ASToJS v" + json.version + "\n",
        outFileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));

        generated += "(function() {\n" + js_source + "\n}());";
        generated = beautify.js_beautify(generated, { indent_size: 4 });

        if (opts.stdout) {
            console.log(generated);
        } else {
            writeFile(outFileNameWithoutExtension + ".js", generated);
        }
    });
});

function writeFile(fileName, content) {
    fs.writeFile(fileName, content, function (error) {
        if (error) {
            return console.log(error);
        }
    });
}
