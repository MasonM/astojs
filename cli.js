#! /usr/bin/env node

"use strict";

var fs = require("fs"),
    pegjs = require("pegjs"),
    nomnom = require("nomnom"),
    beautify = require("js-beautify"),
    json = require("./package.json"),
    compiler = require("./src/compiler");

var opts = nomnom
.option("files", {
    position: 0,
    help: "Files to compile. The compiled versions will be saved with the same filename, except with a .js extension.",
    list: true
})
.option("stdout", {
    abbr: "s",
    flag: true,
    help: "instead of saving compiled source, output to stdout "
})
.option("debug", {
    abbr: "d",
    flag: true,
    help: "debug mode"
})
.option("version", {
    flag: true,
    help: "display the version number",
    callback: function () {
        return "version " + json.version;
    }
})
.parse();

if (!opts.files) {
    console.log(nomnom.getUsage());
    process.exit(0);
}

opts.files.forEach(function (fileName, fileIndex) {
    fs.readFile(fileName, "utf-8", function (error, content) {
        var js_source = compiler.compile(getParser(opts.debug), content);
        var generated =
            "// Generated by ASToJS v" + json.version + "\n" +
            "(function() {\n" + js_source + "\n}());";
        generated = beautify.js_beautify(generated, { indent_size: 4 });

        if (opts.stdout) {
            console.log(generated);
        } else {
            outFileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));
            writeFile(outFileNameWithoutExtension + ".js", generated);
        }
    });
});

function getParser(debugMode) {
    if (debugMode) {
        var grammar = fs.readFileSync('./src/parser.pegjs', 'utf8');
        var options = { trace: true, allowedStartRules: ['Start', 'StartComments'] };
        return pegjs.buildParser(grammar, options);
    } else {
        return module.require('./src/parser');
    }
}

function writeFile(fileName, content) {
    fs.writeFile(fileName, content, function (error) {
        if (error) {
            return console.log(error);
        }
    });
}
